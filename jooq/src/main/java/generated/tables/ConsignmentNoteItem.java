/*
 * This file is generated by jOOQ.
 */
package generated.tables;


import generated.Keys;
import generated.Public;
import generated.tables.records.ConsignmentNoteItemRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConsignmentNoteItem extends TableImpl<ConsignmentNoteItemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.consignment_note_item</code>
     */
    public static final ConsignmentNoteItem CONSIGNMENT_NOTE_ITEM = new ConsignmentNoteItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConsignmentNoteItemRecord> getRecordType() {
        return ConsignmentNoteItemRecord.class;
    }

    /**
     * The column <code>public.consignment_note_item.id</code>.
     */
    public final TableField<ConsignmentNoteItemRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.consignment_note_item.product_id</code>.
     */
    public final TableField<ConsignmentNoteItemRecord, Integer> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.consignment_note_item.price</code>.
     */
    public final TableField<ConsignmentNoteItemRecord, Integer> PRICE = createField(DSL.name("price"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.consignment_note_item.quantity</code>.
     */
    public final TableField<ConsignmentNoteItemRecord, Integer> QUANTITY = createField(DSL.name("quantity"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.consignment_note_item.consignment_note_id</code>.
     */
    public final TableField<ConsignmentNoteItemRecord, Integer> CONSIGNMENT_NOTE_ID = createField(DSL.name("consignment_note_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private ConsignmentNoteItem(Name alias, Table<ConsignmentNoteItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private ConsignmentNoteItem(Name alias, Table<ConsignmentNoteItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.consignment_note_item</code> table
     * reference
     */
    public ConsignmentNoteItem(String alias) {
        this(DSL.name(alias), CONSIGNMENT_NOTE_ITEM);
    }

    /**
     * Create an aliased <code>public.consignment_note_item</code> table
     * reference
     */
    public ConsignmentNoteItem(Name alias) {
        this(alias, CONSIGNMENT_NOTE_ITEM);
    }

    /**
     * Create a <code>public.consignment_note_item</code> table reference
     */
    public ConsignmentNoteItem() {
        this(DSL.name("consignment_note_item"), null);
    }

    public <O extends Record> ConsignmentNoteItem(Table<O> child, ForeignKey<O, ConsignmentNoteItemRecord> key) {
        super(child, key, CONSIGNMENT_NOTE_ITEM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ConsignmentNoteItemRecord, Integer> getIdentity() {
        return (Identity<ConsignmentNoteItemRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ConsignmentNoteItemRecord> getPrimaryKey() {
        return Keys.CONSIGNMENT_NOTE_ITEM_PK;
    }

    @Override
    public List<ForeignKey<ConsignmentNoteItemRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONSIGNMENT_NOTE_ITEM__CONSIGNMENT_NOTE_ITEM_PRODUCT_ID_FKEY, Keys.CONSIGNMENT_NOTE_ITEM__CONSIGNMENT_NOTE_ITEM_CONSIGNMENT_NOTE_ID_FKEY);
    }

    private transient Product _product;
    private transient ConsignmentNote _consignmentNote;

    /**
     * Get the implicit join path to the <code>public.product</code> table.
     */
    public Product product() {
        if (_product == null)
            _product = new Product(this, Keys.CONSIGNMENT_NOTE_ITEM__CONSIGNMENT_NOTE_ITEM_PRODUCT_ID_FKEY);

        return _product;
    }

    /**
     * Get the implicit join path to the <code>public.consignment_note</code>
     * table.
     */
    public ConsignmentNote consignmentNote() {
        if (_consignmentNote == null)
            _consignmentNote = new ConsignmentNote(this, Keys.CONSIGNMENT_NOTE_ITEM__CONSIGNMENT_NOTE_ITEM_CONSIGNMENT_NOTE_ID_FKEY);

        return _consignmentNote;
    }

    @Override
    public ConsignmentNoteItem as(String alias) {
        return new ConsignmentNoteItem(DSL.name(alias), this);
    }

    @Override
    public ConsignmentNoteItem as(Name alias) {
        return new ConsignmentNoteItem(alias, this);
    }

    @Override
    public ConsignmentNoteItem as(Table<?> alias) {
        return new ConsignmentNoteItem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ConsignmentNoteItem rename(String name) {
        return new ConsignmentNoteItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ConsignmentNoteItem rename(Name name) {
        return new ConsignmentNoteItem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ConsignmentNoteItem rename(Table<?> name) {
        return new ConsignmentNoteItem(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
